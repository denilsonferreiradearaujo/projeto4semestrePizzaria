// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Criar uma migration: yarn ou npx prisma migrate dev

// Atualizar uma migração: npx prisma migrate dev --name nome-da-migracao

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id          Int        @id @default(autoincrement())
  nome        String     @db.VarChar(100)
  genero      String     @db.VarChar(45)
  dataNasc    DateTime   @map("data_nasc")
  cpf         String     @db.VarChar(11)
  email       String     @db.VarChar(100)
  tipo        String     @db.VarChar(45)
  status      Int        @default(1)
  dataCreate  DateTime   @default(now()) @map("data_create")
  dataUpdate  DateTime?  @map("data_update")
  enderecos   Endereco[]
  logins      Login[]
  pedidos     Pedido[]
  telefones   TelefonePessoa[]
  passwordResetTokens PasswordResetToken[]
}

model Endereco {
  id          Int        @id @default(autoincrement())
  pessoaId    Int
  cep         String     @db.VarChar(8)
  logradouro  String     @db.VarChar(100)
  numero      String     @db.VarChar(10)
  complemento String?    @db.VarChar(100)
  bairro      String     @db.VarChar(45)
  cidade      String     @db.VarChar(45)
  uf          String     @db.VarChar(45)
  dataCreate  DateTime   @default(now()) @map("data_create")
  dataUpdate  DateTime?  @map("data_update")
  Pessoa      Pessoa     @relation(fields: [pessoaId], references: [id], onDelete: NoAction)
}

model Login {
  id        Int       @id @default(autoincrement())
  pessoaId  Int
  senha     String    @db.VarChar(500)
  tipoLogin String    @db.VarChar(45) @map("tipo_login")
  Pessoa    Pessoa    @relation(fields: [pessoaId], references: [id], onDelete: NoAction)
}

model Telefone {
  id        Int             @id @default(autoincrement())
  numero    String          @db.VarChar(11)
  tipo      String          @db.VarChar(45)
  pessoas   TelefonePessoa[]
}

model TelefonePessoa {
  pessoaId  Int
  telefoneId Int
  Pessoa    Pessoa   @relation(fields: [pessoaId], references: [id], onDelete: NoAction)
  Telefone  Telefone @relation(fields: [telefoneId], references: [id], onDelete: NoAction)

  @@id([pessoaId, telefoneId])
}

model TaxaEntrega {
  id           Int      @id @default(autoincrement())
  distanciaMin Int       @map("distancia_min")
  distanciaMax Int       @map("distancia_max")
  valor        Decimal   @db.Decimal(12, 2)
  dataCreate   DateTime  @default(now()) @map("data_create")
  dataUpdate   DateTime? @map("data_update")
  pedidos      Pedido[]
}

model Pedido {
  id           Int          @id @default(autoincrement())
  pessoaId     Int?
  taxaEntregaId Int
  status       String       @db.VarChar(45)
  numMesa      Int          @map("num_mesa")
  valTotal     Decimal      @db.Decimal(12, 2) @map("val_total")
  dataCreate   DateTime     @default(now()) @map("data_create")
  dataUpdate   DateTime?    @map("data_update")
  Pessoa       Pessoa?      @relation(fields: [pessoaId], references: [id], onDelete: NoAction)
  TaxaEntrega  TaxaEntrega  @relation(fields: [taxaEntregaId], references: [id], onDelete: NoAction)
  items        Item[]
}

model Categoria {
  id          Int          @id @default(autoincrement())
  nome        String       @db.VarChar(100)
  dataCreate  DateTime     @default(now()) @map("data_create")
  dataUpdate  DateTime?    @map("data_update")
  produtos    Produto[]
}

model Produto {
  id          Int          @id @default(autoincrement())
  categoriaId Int
  nome        String       @db.VarChar(150)
  dataCreate  DateTime     @default(now()) @map("data_create")
  dataUpdate  DateTime?    @map("data_update")
  Categoria   Categoria    @relation(fields: [categoriaId], references: [id], onDelete: NoAction)
  itens       Item[]
  tamanhos    Tamanho[]
  valores     Valor[]
}

model Item {
  id         Int        @id @default(autoincrement())
  produtoId  Int
  pedidoId   Int
  quantidade Int
  idValor    Int        @map("id_valor")
  dataCreate DateTime   @default(now()) @map("data_create")
  dataUpdate DateTime?  @map("data_update")
  Produto    Produto    @relation(fields: [produtoId], references: [id], onDelete: NoAction)
  Pedido     Pedido     @relation(fields: [pedidoId], references: [id], onDelete: NoAction)
  sabores    SaboresPizza[]
}

model SaboresPizza {
  id         Int        @id @default(autoincrement())
  idValor    Int        @map("id_valor")
  idProduto  Int        @map("id_produto")
  itemId     Int
  dataCreate DateTime   @default(now()) @map("data_create")
  dataUpdate DateTime?  @map("data_update")
  Item       Item       @relation(fields: [itemId], references: [id], onDelete: NoAction)
}

model Tamanho {
  id         Int        @id @default(autoincrement())
  produtoId  Int
  tamanho    String     @db.VarChar(45)
  dataCreate DateTime   @default(now()) @map("data_create")
  dataUpdate DateTime?  @map("data_update")
  Produto    Produto    @relation(fields: [produtoId], references: [id], onDelete: NoAction)
}

model Valor {
  id         Int        @id @default(autoincrement())
  produtoId  Int
  preco      Decimal    @db.Decimal(12, 2)
  tamanho    Boolean    @default(false)
  status     Boolean    @default(true)
  dataCreate DateTime   @default(now()) @map("data_create")
  dataUpdate DateTime?  @map("data_update")
  Produto    Produto    @relation(fields: [produtoId], references: [id], onDelete: NoAction)
}

model PasswordResetToken {
  id String @id @default(uuid())
  pessoaId Int
  token String
  expiresAt DateTime
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  pessoa Pessoa @relation(fields: [pessoaId], references: [id])

  @@map("password_reset_tokens")
}
